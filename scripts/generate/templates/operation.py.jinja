import json
import typing
import typing_extensions
from .api_instance import get_api_instance
{% if import_statement -%}
{{import_statement}}
{%- endif %}

{% if subnetworksConfig is not none -%}
RequestNetworkQueryParams = typing_extensions.TypedDict("RequestNetworkQueryParams", {
    "{{subnetworksConfig["host_parameter"]}}": typing.Literal[
    {%- for network in subnetworksConfig["networks"] -%}
        "{{network["name"]}}",
    {%- endfor -%}
    ]}, total=False)
{%- endif %}

{% if has_query_params  -%}
class QueryParams(RequestQueryParams{%- if subnetworksConfig is not none -%}, RequestNetworkQueryParams{%-endif-%}):
    pass
{%- endif %}

{% if has_any_params  -%}
class Params({% if has_query_params  -%}QueryParams,{%-endif-%}{% if has_path_params  -%} RequestPathParams,{%-endif-%}):
    pass
{%- endif %}

def {{operation_name}}(api_key: str{%- if has_any_params %}, params: Params{%- endif -%} {%- if has_body %}, body: SchemaForRequestBodyApplicationJson {%- endif -%}):
    api_instance = get_api_instance(api_key{%- if has_any_params %}, params{%endif%})
    {% if has_query_params -%}
    query_params: typing.Any = {k: v for k, v in params.items() if k in RequestQueryParams.__annotations__.keys()}
    {% endif -%}
    {% if has_path_params -%}
    path_params: typing.Any = {k: v for k, v in params.items() if k in RequestPathParams.__annotations__.keys()}
    {% endif -%}

    api_response = api_instance.{{operation_name}}(
        {% if has_body -%}
        body=body,
        {% endif -%}
        {% if has_query_params -%}
        query_params=query_params,
        {% endif -%}
        {% if has_path_params -%}
        path_params=path_params,
        {% endif -%}
        {% if is_json_response -%}
        accept_content_types=(
            'application/json; charset=utf-8',
        ),
        {% endif -%}
        skip_deserialization=True
    )

    return json.loads(api_response.response.data)

